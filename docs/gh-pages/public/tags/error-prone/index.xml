<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>error-prone on DSLinter - Linter for Machine Learning - Specific Code Smells</title>
    <link>/tags/error-prone/</link>
    <description>Recent content in error-prone on DSLinter - Linter for Machine Learning - Specific Code Smells</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/tags/error-prone/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>In Place APIs Misused</title>
      <link>/code-smells/in-place-apis-misused/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/in-place-apis-misused/</guid>
      <description>Description “In-place operation is an operation that directly changes the content of a given linear algebra, vector, matrices (Tensor) without making a copy.” Due to the nature of the in-place operation, the in-place APIs are easily misused. Developers sometimes forget to set the in-place parameter in APIs to true while not assigning the new result to a variable, causing potential silent bugs. The data is not updated in this way, but the developer thinks it is and might not be able to find where the bug is.</description>
    </item>
    
    <item>
      <title>Data Leakage</title>
      <link>/code-smells/data-leakage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/data-leakage/</guid>
      <description>Description &amp;ldquo;Data Leakage happens when the data you are using to train a machine learning algorithm happens to have the information you are trying to predict.&amp;rdquo; It results in overly optimistic performance during testing and poor performance in real-world usage. There are two main sources of data leakage: leaky predictors and a leaky validation strategy. Leaky predictors refer to the situation where some features updated or created after the target value is realized are included.</description>
    </item>
    
    <item>
      <title>Hyperparameter not Explicitly Set</title>
      <link>/code-smells/hyperparameter-not-explicitly-set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/hyperparameter-not-explicitly-set/</guid>
      <description>Description Hyperparameters are ML algorithm parameters used to control the learning process and are usually determined before the actual process starts. Hyperparameters should be set and tuned because they improve prediction quality and reproducibility. Tuning hyperparameters can lead to higher prediction quality because the default parameters of the learning algorithm may not be optimal for a given data or problem, and may lead to local optima. These parameters directly control the behavior of the training algorithm and therefore have a significant impact on the performance of the model.</description>
    </item>
    
    <item>
      <title>Excessive Hyperparameter</title>
      <link>/deprecated/excessive-hyperparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deprecated/excessive-hyperparameter/</guid>
      <description>Description Excessive hyperparameter precision is a potential risk for overtuning. Overtuning occurs if an overly high precision hyperparameter value allows the model to perform particularly well while values in close range of it do not. Further, the choice of such a hyperparameter might be uninterpretable to users, which leads to an untrustworthy result.
Type Generic
Existing Stage Model Training
Effect Error-prone
Example ### Scikit-Learn from sklearn.naive_bayes import MultinomialN # Violated Code mnb = MultinomialNB(alpha = 0.</description>
    </item>
    
    <item>
      <title>Counterintuitive Hyperparameter</title>
      <link>/deprecated/counterintuitive-hyperparameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deprecated/counterintuitive-hyperparameter/</guid>
      <description>Description Counterintuitive hyperparameters will also cause bugs. There are four posts on StackOverflow discussing where the bug in the program is, and it turns out that a large learning rate causes bugs. This implies that the developer should check whether the hyperparameters stay in the normal range when developing ML applications.
Type Generic
Existing Stage Model Training
Effect Error-prone
Example # TensorFlow import tensorflow as tf # Violated Code optimizer = tf.</description>
    </item>
    
    <item>
      <title>Missing the Mask of Invalid Value</title>
      <link>/code-smells/missing-the-mask-of-invalid-value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/missing-the-mask-of-invalid-value/</guid>
      <description>Description Several posts on Stack Overflow talk about the bugs that are not easy to discover caused by the log parameter approaching zero. In this kind of program, the log function variable turns to zero and raises an error during the training process. However, the error&amp;rsquo;s stack trace did not directly point to the line of code that the bug exist. This kind of problem is not easy to debug and might take a long training time to find.</description>
    </item>
    
    <item>
      <title>Nan Equality Misused</title>
      <link>/code-smells/nan-equality-misused/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/nan-equality-misused/</guid>
      <description>Description While None == None evaluates to True, numpy.nan == numpy.nan evaluates to False. As Pandas treats None like numpy.nan for simplicity and performance reasons, a comparison of DataFrame elements with numpy.nan always return False . Therefore, developers need to be careful when using the NaN comparision in Numpy and Pandas. Otherwise, it may lead to unintentional behavior in the code.
Type API Specific
Existing Stage Data Preparation
Effect Error-prone</description>
    </item>
    
    <item>
      <title>Chain Indexing Misused</title>
      <link>/code-smells/chain-indexing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/chain-indexing/</guid>
      <description>Avoid using chain indexing in Pandas.</description>
    </item>
    
    <item>
      <title>Tensor Shape Unset</title>
      <link>/deprecated/tensor-shape-unset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deprecated/tensor-shape-unset/</guid>
      <description>Description Several bugs can be caused by tensor unaligned. Usually, the unaligned tensor problems cannot be identified at the code level, but we can explicitly control one. It is recommended to explicitly set the shape of the input for tf.Variable() to make the tensor aligned. In this way, we can alleviate the unaligned tensor problem.
Type API Specific
Existing Stage Data Preparation
Effect Error-prone
Example ### TensorFlow import Tensorflow as tf # Violated Code normal_dist = tf.</description>
    </item>
    
    <item>
      <title>Initialization Order Misused</title>
      <link>/deprecated/initialization-order-misused/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deprecated/initialization-order-misused/</guid>
      <description>Description The AdamOptimizer class in the TensorFlow creates additional variables named &amp;ldquo;slots&amp;rdquo;. The variables must be initialized before training the model. Therefore, if the developer call initialize_all_variables() before calling AdamOptimizer and does not call the initializer afterward, the variables created by AdamOptimizer will not be initialized and might cause an error.
Type API Specific
Existing Stage Model Training
Effect Error-prone
Example ### TensorFlow import tensorflow as tf # Violated Code init = tf.</description>
    </item>
    
    <item>
      <title>Train Eval Mode Improper Toggling</title>
      <link>/code-smells/train-eval-mode-improper-toggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/train-eval-mode-improper-toggling/</guid>
      <description>Description In PyTorch, calling .eval() means we are going into the evaluation mode and the Dropout layer will be deactivated. If the training mode did not toggle back in time, the Dropout layer would not be used in some data training and thus affect the training result. Therefore, we suggest to &amp;ldquo;have the training mode set as close as possible to the inference step to avoid forgetting to set it&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Zero_grad Not Used Before Backward</title>
      <link>/code-smells/zero_grad-not-used-before-backward/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/zero_grad-not-used-before-backward/</guid>
      <description>Description Developers should use optimizer.zero_grad(), loss_fn.backward(), optimizer.step() together and should be forget to use optimizer.zero_grad() before loss_fn.backward(). optimizer.zero_grad() clears the old gradients from last step. If this API is not used, the gradients will be accumulated from all loss.backward() calls and it will lead to the gradient explosion, which fails the training.
Type API Specific
Existing Stage Model Training
Effect Error-prone
Example # PyTorch # 1. Load and normalize CIFAR10 import torch import torchvision import torchvision.</description>
    </item>
    
    <item>
      <title>Loss API Misused</title>
      <link>/code-smells/loss-api-misused/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/loss-api-misused/</guid>
      <description>Description Different loss APIs take different input formats, but the difference is not clarified in some documentations, so it is easy to misuse. For example, in PyTorch, the NLLLoss takes the output of LogSoftmax as the input. If the input given to NLLLoss has not been processed by LogSoftmax, it might lead to a wrong result.
Type API Specific
Existing Stage Model Training
Effect Error-prone
Example ### PyTorch import torch.nn as nn import torch + m = nn.</description>
    </item>
    
    <item>
      <title>Initialize Weight to a Constant</title>
      <link>/deprecated/initialize-weight-to-zero/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/deprecated/initialize-weight-to-zero/</guid>
      <description>Description In neural network, if all the weights are initialized to a constant, i.e., all the neurons starts with the same weight, all the neurons will follow the same gradient during the backward propagation update. As a result, neurons will learn same features in each iterations. In this way, the nueral netwok will provide a poor result.
Type Generic
Existing Stage Model Training
Effect Error-prone
Example # https://github.com/aladdinpersson/Machine-Learning-Collection/blob/a2ee9271b5280be6994660c7982d0f44c67c3b63/ML/Projects/Exploring_MNIST/networks/lenet.py import torch import torch.</description>
    </item>
    
  </channel>
</rss>
