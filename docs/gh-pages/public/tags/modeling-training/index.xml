<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>modeling training on DSLinter - Linter for Machine Learning - Specific Code Smells</title>
    <link>/tags/modeling-training/</link>
    <description>Recent content in modeling training on DSLinter - Linter for Machine Learning - Specific Code Smells</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/tags/modeling-training/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pytorch Call Method Misused</title>
      <link>/code-smells/pytorch-call-method-misused/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/code-smells/pytorch-call-method-misused/</guid>
      <description>Description In PyTorch, self.nn() is different than self.nn.forward(). self.nn() also deals with all the register hooks, which would not be considered when calling the plain forward. Thus, it is recommended to use self.nn() than self.nn.forward().
Type API Specific
Existing Stage Model Training
Effect Robustness
Example ### PyTorch # 1. Load and normalize CIFAR10 import torch import torchvision import torchvision.transforms as transforms transform = transforms.Compose( [transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.</description>
    </item>
    
  </channel>
</rss>
